1.
(a)

The Strategy Pattern is a behavioural pattern that delays algorithm selection until runtime.
It does this by encapsulating the algorithms and making them interchangeable.

(b)

This pattern can be used when multiple approaches can be used to reach given result.


3.
The Abstract Factory Pattern creates families of related / dependent objects without specifying their concrete classes.

5.
If different implementations of an objects construction are kept within the object, the object can suffer from
object bloat and less modularity. This is more of a problem when the object is complex.

7.
(a)
The Facade Pattern wraps a complicated subsystem with a simpler interface.

(b)
The Facade pattern is useful when you have a complex system that may require frequent modification.

9.
The Bridge Pattern should be used when you want to decouple an abstraction from its implementation.